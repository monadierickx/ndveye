# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ndveye
                                 A QGIS plugin
 Plant counting.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-25
        copyright            : (C) 2024 by Bator Menyhert Koncz & Pal Szabo
        email                : ndveye@protonmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Bator Menyhert Koncz & Pal Szabo"
__date__ = "2024-03-25"
__copyright__ = "(C) 2024 by Bator Menyhert Koncz & Pal Szabo"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from qgis.PyQt.QtGui import QColor
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingParameterRasterLayer,
    QgsProcessingParameterMultipleLayers,
    QgsProcessingParameterFile,
    QgsProcessingParameterNumber,
    QgsProcessingParameterBoolean,
    QgsPointXY,
    QgsGeometry,
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsSimpleLineSymbolLayer,
    QgsSimpleMarkerSymbolLayer,
    QgsProcessingParameterFolderDestination,
    QgsCoordinateTransform, 
    QgsCoordinateReferenceSystem
)
import os
import shapely
import rasterio
import numpy as np
import pandas as pd
import geopandas as gpd
import astropy.convolution
import photutils.segmentation
import json

class ndveyeAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = "OUTPUT"
    INPUT = "INPUT"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                "inputRasters",
                # accept any raster layers:
                self.tr("Input raster(s)"),
                QgsProcessing.TypeRaster,
            )
        )

        # Add float input parameter field called offset:
        self.addParameter(
            QgsProcessingParameterNumber(
                "Background offset",
                self.tr("Background offset"),
                QgsProcessingParameterNumber.Double,
                0.15,
            )
        )

        # Add float input parameter field called Kernel FWHM:
        self.addParameter(
            QgsProcessingParameterNumber(
                "Kernel FWHM",
                self.tr("Kernel FWHM"),
                QgsProcessingParameterNumber.Double,
                1.0,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "Kernel size",
                self.tr("Kernel size"),
                QgsProcessingParameterNumber.Integer,
                7,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "Detection threshold",
                self.tr("Detection threshold"),
                QgsProcessingParameterNumber.Double,
                0.08,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "Minimum pixel count",
                self.tr("Minimum pixel count"),
                QgsProcessingParameterNumber.Integer,
                2,
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                "Connectivity: use 8 instead of 4",
                self.tr("Connectivity: use 8 instead of 4"),
                defaultValue=False,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "Number of deblending thresholds",
                self.tr("Number of deblending thresholds"),
                QgsProcessingParameterNumber.Integer,
                500,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "Minimum contrast for object separation",
                self.tr("Minimum contrast for object separation"),
                QgsProcessingParameterNumber.Double,
                0.00005,
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                "Output: polygons",
                self.tr("Output: polygons"),
                defaultValue=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                "Output: points",
                self.tr("Output: points"),
                defaultValue=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                "Output: parameter summary",
                self.tr("Output: parameter summary"),
                defaultValue=True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterBoolean(
                "EPSG:3857",
                self.tr("Use EPSG:3857 (Web Mercator) instead of using the CRS from the input layers."),
                defaultValue=False,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                "FOLDER_PATH",
                "Folder location"
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        folder_path = self.parameterAsString(parameters, 'FOLDER_PATH', context)
        polygondfs = []
        pointdfs = []
        objectcount = {}
        totalcount = 0

        for index, inputId in enumerate(parameters["inputRasters"]):
            counter = 0
            for _, v in QgsProject.instance().mapLayers().items():
                if v.id() == inputId:
                    inputFile = v.source()
                    layer_crs = v.crs()
                    layer_crs_id = layer_crs.authid()
                    counter += 1
            assert counter < 2, "Multiple layers with the same id found"

            with rasterio.open(inputFile, "r") as src:
                data = src.read(1)
                profile = src.profile
                bounds = src.bounds

            rowNum, colNum = data.shape

            totalWidth = bounds.right - bounds.left
            totalHeight = bounds.top - bounds.bottom

            pixelWidth = totalWidth / colNum
            pixelHeight = totalHeight / rowNum

            def pixelcoord_to_epsg3857(row, col):
                x = bounds.left + (col + 1 / 2) * pixelWidth
                y = bounds.top - (row + 1 / 2) * pixelHeight
                return x, y

            def point_to_square(
                centerx, centery, pixelWidth=pixelWidth, pixelHeight=pixelHeight
            ):
                return shapely.geometry.Polygon(
                    [
                        [centerx - pixelWidth / 2, centery - pixelHeight / 2],
                        [centerx + pixelWidth / 2, centery - pixelHeight / 2],
                        [centerx + pixelWidth / 2, centery + pixelHeight / 2],
                        [centerx - pixelWidth / 2, centery + pixelHeight / 2],
                        [centerx - pixelWidth / 2, centery - pixelHeight / 2],
                    ]
                )

            data -= np.ones(shape=data.shape) * parameters["Background offset"]

            kernel = photutils.segmentation.make_2dgaussian_kernel(
                parameters["Kernel FWHM"], size=parameters["Kernel size"]
            )
            convolved_data = astropy.convolution.convolve(data, kernel)

            segment_map = photutils.segmentation.detect_sources(
                convolved_data,
                np.ones(shape=data.shape) * parameters["Detection threshold"],
                npixels=parameters["Minimum pixel count"],
                connectivity=8 if parameters["Connectivity: use 8 instead of 4"] else 4,
            )

            segm_deblend = photutils.segmentation.deblend_sources(
                convolved_data,
                segment_map,
                npixels=parameters["Minimum pixel count"],
                nlevels=parameters["Number of deblending thresholds"],
                contrast=parameters["Minimum contrast for object separation"],
                progress_bar=True,
            )

            shapes = []
            for label in segm_deblend.labels:
                xs, ys = np.where(np.array(segm_deblend) == label)
                targetPixels = [[x, y] for (x, y) in zip(xs, ys)]
                targetPixelsArray = [point_to_square(*pixelcoord_to_epsg3857(*each)).buffer(0.001) for each in targetPixels]

                shapes.append(shapely.unary_union(targetPixelsArray))

            nr_detected_objects = len(shapes)
            objectcount[inputId] = nr_detected_objects
            totalcount += nr_detected_objects
            
            group = os.path.basename(inputFile).replace(".tif", "")

            geom = gpd.GeoSeries(shapes).set_crs(3857) if parameters["EPSG:3857"] else gpd.GeoSeries(shapes).set_crs(layer_crs_id)
            gdf = gpd.GeoDataFrame(geometry=geom)
            gdf["group"] = group
            polygondfs.append(gdf)

            geom = [each.centroid for each in shapes]
            gdf = gpd.GeoDataFrame(geometry=geom)
            gdf["group"] = group
            pointdfs.append(gdf)

        if parameters["Output: polygons"]:
            
            if parameters["EPSG:3857"]:
                gpd.GeoDataFrame(pd.concat(polygondfs)).set_crs(3857).to_file(
                    folder_path + "/polygons.gpkg",
                    driver="GPKG",
                    layer="polygons",
                    engine="pyogrio",
                )
            else: 
                gpd.GeoDataFrame(pd.concat(polygondfs)).set_crs(layer_crs_id).to_file(
                    folder_path + "/polygons.gpkg",
                    driver="GPKG",
                    layer="polygons",
                    engine="pyogrio",
                )
            
            polygonLayer = QgsProject.instance().addMapLayer(
                QgsVectorLayer(
                    folder_path + "/polygons.gpkg", "resultPolygons", "ogr"
                )
            )
            polygonLayer.renderer().symbol().changeSymbolLayer(
                0, QgsSimpleLineSymbolLayer(QColor("#ebe134"), width=1)
            )

        if parameters["Output: points"]:
            if parameters["EPSG:3857"]:
                gpd.GeoSeries(pd.concat([e.geometry for e in pointdfs])).set_crs(3857).to_file(
                    folder_path + "/points.gpkg",
                    driver="GPKG",
                    layer="points",
                    engine="pyogrio",
                    index=False,
                )
            else:
                gpd.GeoSeries(pd.concat([e.geometry for e in pointdfs])).set_crs(layer_crs_id).to_file(
                    folder_path + "/points.gpkg",
                    driver="GPKG",
                    layer="points",
                    engine="pyogrio",
                    index=False,
                )
            
            pointsLayer = QgsProject.instance().addMapLayer(
                QgsVectorLayer(
                    folder_path + "/points.gpkg", "resultPoints", "ogr"
                )
            )
            pointsLayer.renderer().symbol().changeSymbolLayer(
                0, QgsSimpleMarkerSymbolLayer(color=QColor("#38db2c"), size=3)
            )

        data = {
            "Total objects detected": totalcount,
            "Objects per layer": objectcount,
            "CRS": layer_crs_id,
            "Background offset": parameters["Background offset"],
            "Parameters": parameters,
        }

        if parameters["Output: parameter summary"]:
            output_file = folder_path + "/summary.json"
            with open(output_file, "w") as file:
                json.dump(data, file, indent=4)
        
        return data

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "ndveye"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ""

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return ndveyeAlgorithm()
